/**************************************************************************
 *	bluefire-os
 *	Version: 00.00.00
 *	Author: David Davidson
 *	Name: ext2.c
 *	Created: Feb 27, 2012
 *	Purpose:
 *  Usage:
***************************************************************************/
#include <common_include.h>

//The current path
s08int path[256];
//mounted file system sentinel
s32int mount_sentinel = 0;

// --- Pointers to file system descriptors loaded off the disk ---
// pointer to the superblock
struct super_block 		*superblock = 0;
// pointer to the group descriptor table
struct group_descriptor *group_descriptor_table = 0;
//block read off disk that holds the inode we want
struct i_node 			*current_inode_block = 0;

struct i_node 			new_inode;


// --- Values calculated from the SuperBlock
u32int formated_block_size;
u32int fragment_size;
u32int number_of_groups;
u32int inodes_per_indirect;
u16int inodes_per_block;
u16int sectors_per_block;


// --- Variables representing a open file object ---
// A list of pointers in LBA to all the blocks needed by our current file object.
u32int *pointer_directory;
// Number of pointers loaded in to pointer_directory
u32int number_blocks_loaded = 0;

// --- Variables representing a open directory object ---
// Parsed directory
struct directory_entry parsed_directory[MAX_LOADED_DIRS];
// Amount of entries in parsed directory
u32int parsed_directory_size;

// ---Load the sections of the disk---
void load_super_block() {
	u32int sentinal = FALSE;

	if (superblock) {
		kfree(superblock);
	}

	superblock = kmalloc(DIMENSION_SUPER_BLOCK);
	memset(superblock, 0, DIMENSION_SUPER_BLOCK);

	sentinal = fdc_read((START_SUPER_BLOCK/FDC_SECTOR_SIZE),(u08int *)superblock,(DIMENSION_SUPER_BLOCK / FDC_SECTOR_SIZE));

	if( sentinal == FALSE){
		set_color(LIGHT_RED);
		printf("\n\rFatal Error mounting file system\n\r");
		halt();
	}

	//Sanity check by looking at magic number
	if (superblock->s_magic != EXT2_MAGIC_NUMBER) {
		set_color(LIGHT_RED);
		printf("\n\rFatal Error verifying file system\n\r");
		halt();
	}
}

// Return the current path
s08int *pwd() {
	return(path);
}

//mount the floppy's ext2 file system
void mount_floppy() {

	if (mount_sentinel) {
		kprintf("\nERROR - File system already mounted!\n");
		return;
	}

	kprintf("\nInitializing FileSystem...\n");
	// Initialize the path
	path[0]='\0';
}
