/**************************************************************************
 *	bluefire-os
 *	Version: 00.00.00
 *	Author: David Davidson
 *	Name: interrupt_controller.c
 *	Created: Jan 30, 2012
 *	Purpose:
 *  Usage:
***************************************************************************/
#include <common_include.h>

// Exception stubs
// Declared in os/assembly/exception_top.s
extern u32int exc_00, exc_01, exc_02, exc_03, exc_04, exc_05, exc_06, exc_07;
extern u32int exc_08, exc_09, exc_0A, exc_0B, exc_0C, exc_0D, exc_0E, exc_0F;
extern u32int exc_unhandled;

// Interrupt request stubs
// Declared in os/assembly/interrupt_top.s
extern u32int irq_00, irq_01, irq_02, irq_03, irq_04, irq_05, irq_06, irq_07;
extern u32int irq_08, irq_09, irq_0A, irq_0B, irq_0C, irq_0D, irq_0E, irq_0F;
extern u32int irq_unhandled;

// The Interrupt Descriptor Table (IDT)
// The IDT register will point here
volatile idt_entry_t idt[IDT_DIMENSION];
idt_reg_t idt_ptr;

s32int spurious_interrupt_show = 1;

void reprogram_PIC_8259() {
	// Yet another stunning feature of the x86 architecture is that on startup there is a IRQ conflict
	// Between the CPU and the Programmable Interrupt Controller (PIC). The PIC is using IRQ numbers 0-15 to
	// signal various hardware interrupts.At the same time by default the CPU uses 0-31 to signal when
	// it has a interrupt that needs attention. Luckily the PIC's are easy to reprogram, you just reset them.
	// As part of the reset routine you need to specify what IRQ you want that specific chip to start at.
	// You send it a reset command and then 4 ICWS specifying what features and configurations you want.


	// ICW1 (interrupt control word)
	// Write the reset command (0x11) to PIC1's command port (0x20).
	outport08(MASTER_8259_COMMAND_PORT, 0x11);
	// Write the reset command (0x11) to PIC2's command port (0xA0).
	outport08(SLAVE_8259_COMMAND_PORT, 0x11);

	// ICW2
	// Write PIC1's first isr number 0x20(32) to PIC1's data port (0x21).
	outport08(MASTER_8259_REGISTER_PORT, 0x20);
	// Write PIC2's first isr number 0x28(40) to PIC2's data port (0xA1).
	outport08(SLAVE_8259_REGISTER_PORT, 0x28);

	// ICW3
	// Tell PIC1 to signal PIC2 using its 4th interrupt line.
	outport08(MASTER_8259_REGISTER_PORT, 0x04); // IRQ2 cascade to slave
	outport08(SLAVE_8259_REGISTER_PORT, 0x02); // cascade on IRQ2

	// ICW4
	// Set PIC1 to 8086/88 (MCS-80/85) mode
	outport08(MASTER_8259_REGISTER_PORT, 0x01);
	// Set PIC2 to 8086/88 (MCS-80/85) mode
	outport08(SLAVE_8259_REGISTER_PORT, 0x01);

	// Disable all interrupts for now
	outport08(MASTER_8259_REGISTER_PORT, 0xFF);
	outport08(SLAVE_8259_REGISTER_PORT, 0xFF);
}

static void set_idt_gate(u08int num, u32int offset, u16int selector, u08int attributes){
	u32int flags;
	disable_and_save_interrupts(flags);

	idt[num].offset0_15 = offset & 0xFFFF;
	idt[num].selector = selector;
	idt[num].reserved = 0;	//By INTEL definition
	idt[num].attribs = attributes;
	idt[num].offset16_31 = (offset >> 16);

	restore_interrupts(flags);
}

void initialize_idt() {

	u32int i;

	for(i=0x00; i <= 0x1F; i++) {
		set_idt_gate(i, &exc_unhandled, KERNEL_CODE, INTERRUPT_GATE);
	}

	// Setup the IDT entries for exceptions. (note changed to linux values)
	// Install Division by 0 handler
	set_idt_gate( 0x00, &exc_00, KERNEL_CODE, TRAP_GATE);
	// Install Debug trap handler
	set_idt_gate( 0x01, &exc_01, KERNEL_CODE, TRAP_GATE);
	// Install Non-Maskable Interrupt
	set_idt_gate( 0x02, &exc_02, KERNEL_CODE, TRAP_GATE); //from INTERRUPT_GATE
	// Install Breakpoint handler
	set_idt_gate( 0x03, &exc_03, KERNEL_CODE, USER_TRAP_GATE);
	// Install Overflow handler
	set_idt_gate( 0x04, &exc_04, KERNEL_CODE, USER_TRAP_GATE);
	// Install Bound range handler
	set_idt_gate( 0x05, &exc_05, KERNEL_CODE, USER_TRAP_GATE);
	// Install Invalid opcode handler
	set_idt_gate( 0x06 , &exc_06, KERNEL_CODE, TRAP_GATE);
	// Install no math co-processor handler
	set_idt_gate( 0x07 , &exc_07, KERNEL_CODE, TRAP_GATE);
	// Install Double fault handler
	set_idt_gate( 0x08 , &exc_08, KERNEL_CODE, TRAP_GATE); //from TASK_GATE
	// Install 80x87 overflow handler
	set_idt_gate( 0x09, &exc_09, KERNEL_CODE, TRAP_GATE);
	// Install Invalid TSS handler
	set_idt_gate( 0x0A, &exc_0A, KERNEL_CODE, TRAP_GATE);
	// Install Segment not present handler
	set_idt_gate( 0x0B, &exc_0B, KERNEL_CODE, TRAP_GATE);
	// Install Stack fault handler
	set_idt_gate( 0x0C, &exc_0C, KERNEL_CODE, TRAP_GATE);
	// Install General protection fault handler
	set_idt_gate( 0x0D, &exc_0D, KERNEL_CODE, TRAP_GATE);
	// Install Page fault handler
	set_idt_gate( 0x0E, &exc_0E, KERNEL_CODE, TRAP_GATE);	//from INTERRUPT_GATE
	// Install Unknown exception handler
	set_idt_gate( 0x0F, &exc_0F, KERNEL_CODE, TRAP_GATE);	//from INTERRUPT_GATE
	// Interrupts 0x10 through 0x1f Remain pointing to exc_unhandled.

	// Install default IRQ handlers 0x20..0xFF
	for(i=0x20;i<=0xFF;i++)
		setup_idt_gate(i, (u32int)&irq_unhandled, KERNEL_CODE, INTERRUPT_GATE);

	// Setup the IDT entries for IRQs.  (note changed to linux values was TRAP_GATE)
	set_idt_gate( 0x20, &irq_00, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x21, &irq_01, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x22, &irq_02, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x23, &irq_03, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x24, &irq_04, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x25, &irq_05, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x26, &irq_06, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x27, &irq_07, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x28, &irq_08, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x29, &irq_09, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x2A, &irq_0A, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x2B, &irq_0B, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x2C, &irq_0C, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x2D, &irq_0D, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x2E, &irq_0E, KERNEL_CODE, INTERRUPT_GATE);
	set_idt_gate( 0x2F, &irq_0F, KERNEL_CODE, INTERRUPT_GATE);

	//TODO system calls

	// Set up the IDT pointer.
	idt_ptr.limit = (IDT_DIMENSION * IDT_ENTRY_DIMIMENSION - 1);
	*(u32int *)idt_ptr.base = ((u32int)&idt);

	// Load info into IDTR register.
	__asm__ __volatile__ ("lidtl (%0)" : : "r"((u32int)&idt_ptr));

	// install spurious interrupt
	// TODO trap 15
	register_interrupt_handler(SPURIOUS_IRQ, &spurious_interrupt);
	register_interrupt_handler(SPURIOUS_IRQ, &fake_keyboard);

	enable_interrupts();
}

void spurious_interrupt(irq_context_t *context) {
	if(spurious_interrupt_show) {
		kprintf("\nSpurious interrupt: ->%x\n",context->IRQ);
	}
}

void fake_keyboard(irq_context_t *context) {
	kprintf("\nKeyboard interrupt caught: ->%x\n",context->IRQ);
	dbg("Remember to remove fake keyboard")
}
