;**********************************************************
;	bluefire-os
;	Version: 00.00.03
;	Author: David Davidson
;	Name: enable_paging.asm
;	Last update: 2012-01-10
;	Purpose:
;	Usage: Must be in protect mode.
;***********************************************************

; Tell assembler to generate 32 bit byte code. Any code in this
; Module must be called after in Protect mode.
[BITS 32]

; Paging constants
%define	P_PRESENT 	0x01
%define P_WRITE		0x02
%define P_USER		0x04
%define PAGE_SIZE	0x1000

; TODO -> document memory map
%define K_PDE		0x1000	; Page directory
%define K_PTE		0x2000	; Kernel page table #0 (4MB)
%define I_PTE		0x3000	; First 4MB Identity-map page table

%macro memset 3
; void memset(void *dest_ptr, int val, dword count);
; o32 a32 forces the string command into 32 bit mode.
	mov edi, %1
	mov eax, %2
	mov ecx, %3
	cld
	o32 a32 rep stosb
%endmacro

%macro memcpy 3
; void memcpy(void *dest_ptr, void *org_ptr, dword count);
	mov edi, %1
	mov esi, %2
	mov ecx, %3
	cld
	o32 a32 rep movsb
%endmacro

setup_and_enable_paging:
	; Zero out the future page table, you don't want random entries there
	; pointing to phantom memory
	; -> 0x1000 - 0x1FFF : 0x0
	memset K_PDE, 0, PAGE_SIZE

	; Setup first 4MB as identity-map (I_PTE)
	; -> 0x3000 - 0x3FFF : 0x0(0 - 3FF)003
	mov	eax, (P_PRESENT | P_WRITE)
	mov	ecx, 1024
	mov	edi, I_PTE
	cld
Map_I_PTE:
	stosd
	add	eax, PAGE_SIZE
	loop	Map_I_PTE


	ret
