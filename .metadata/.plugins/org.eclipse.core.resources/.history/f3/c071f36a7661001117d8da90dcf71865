/**************************************************************************
 *	bluefire-os
 *	Version: 00.00.10
 *	Author: David Davidson
 *	Name: floppy.c
 *	Created: Feb 27, 2012
 *	Purpose:
 *  Usage:
***************************************************************************/
#include <common_include.h>


// FDC operation finish
volatile s32int fdc_done = FALSE;

// Disk change flag
volatile s32int fdc_change = FALSE;

// Current head position
volatile u08int fdc_track = 0xFF;

// Status register 0
volatile u08int status_register_0 = 0;

// Floppy r/w buffer
u08int *fdc_buffer;

// ---------- Floppy functions ----------
void fdc_sendbyte(u08int b) {
// Send a byte to the FDC controller
	s32int msr;
	s32int tmo;

	for (tmo=0; tmo<128; tmo++)	{
		msr = inport08(FDC_MSR);
		if ((msr & 0xC0) == 0x80)
		{
			outport08(FDC_DATA, b);
			return;
		}
		inport08(0x80); //delay
	}
}

int fdc_getbyte() {
// Get a byte from the FDC controller
	s32int msr;
	s32int tmo;

	for (tmo=0; tmo<128; tmo++)
	{
		msr = inport08(FDC_MSR);
		if ((msr & 0xD0) == 0xD0)
			return(inport08(FDC_DATA));
		inport08(0x80); //delay
	}
	return(-1); // timeout
}

// Seek the track
s32int fdc_seek(s32int track) {
	// If already there return
	if (fdc_track == track)
		return(TRUE);
	// Turn the motor on
	fdc_motor_on();
	// Send seek command
	fdc_sendbyte(FLOPPY_COMMAND_SEEK);
	fdc_sendbyte(0);
	fdc_sendbyte(track);
	// Wait until seek is finished
	if (!fdc_wait(TRUE)) {
		// Timeout!
		fdc_motor_off();
		return(FALSE);
	}

	// Let the head settle for 15msec
	delay(15);

	// Turn off the motor
	fdc_motor_off();

	// Check if seek worked
	if ((status_register_0 != 0x20) || (fdc_track != track))
		return(FALSE);
	else
		return(TRUE);
}

void fdc_reset() {
	// Stop the motor and disable IRQ
	outport08(FDC_DOR, 0x00);
	// Program data rate (500K/s)
	outport08(FDC_DSR, 0x00);

	// re-enable floppy IRQ
	outport08(FDC_DOR, 0x0C);
	// Wait for fdc
	fdc_done = TRUE;
	fdc_wait(TRUE);

	// Specify drive timings //
	fdc_sendbyte(FLOPPY_COMMAND_SPECIFY);
	fdc_sendbyte(0xDF); // SRT = 3ms, HUT = 240ms
	fdc_sendbyte(0x02); // HLT = 4ms, ND = 0 (DMA mode selected)

	// Clear disk change flag
	fdc_seek(1);

	fdc_recalibrate();
	fdc_change = FALSE;

}

// Initialize the floppy driver
void initialize_floppy() {
	s32int v;

	// Create the FDC buffer
	fdc_buffer = (u08int *)PHYSICAL( dma_pop_frame() * PAGE_SIZE );

	// Reset the controller
	fdc_reset();

	// Get floppy controller version
	fdc_sendbyte(FLOPPY_COMMAND_VERSION);
	v = fdc_getbyte();

	if (v==0x90)
		printf("Enhanced");
	else
		printf("8272A/765A");
}
