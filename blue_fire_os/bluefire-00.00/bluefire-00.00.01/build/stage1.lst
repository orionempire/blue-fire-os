     1                                  ;**********************************************************
     2                                  ;	bluefire-os
     3                                  ;	Version: 00.00.01
     4                                  ;	Author: David Davidson
     5                                  ;	Name: stage1.asm
     6                                  ;	Last update: 2011-11-23
     7                                  ;	Purpose: First stage of our tutorial OS, called by BIOS, loads stage 2 into memory
     8                                  ;	Usage: Must be on sector 1 of floppy. Must be 512 Bytes and end with 0xAA55
     9                                  ;   Usage: Will be loaded to 0x7C00 (0000:7C00) by BIOS.
    10                                  ;***********************************************************
    11                                  
    12                                  ;***********************************************************
    13                                  ;	Since we are starting in real mode everything will be
    14                                  ;	in 16 bits. This directive tells the assembler to assemble
    15                                  ;	for a 16 bit architecture. So for mov it would generate a
    16                                  ;	opcode of B8. When we use "bits 32" the same instruction will
    17                                  ;	generate a op code of 66B8
    18                                  ;***********************************************************
    19                                  bits 16
    20                                  
    21                                  ;***********************************************************
    22                                  ;	As mentioned the code gets loaded at 0x7C00 by bios convention
    23                                  ;	if we used the "org 0x7C00" directive, all of the segment registers
    24                                  ;	would stay at 0x0000 and the assembler would make all address calculations
    25                                  ;	with a delta of 0x7C00, so for example a label on the 3rd byte would
    26                                  ;	be referenced as goto 0x7C03 (0000:7C03).
    27                                  ;	Because this is a tutorial OS we want transparency and visibility
    28                                  ;	over convenience so we will set all segment registers to 0x07C0 so that
    29                                  ;	the address of the label stays 0x0003 but gets addressed like 07C0:0003 (0x7C03)
    30                                   ;***********************************************************
    31                                  
    32                                  org 0
    33                                  
    34 00000000 EB11                    start: jmp main			;Jump to first bytes of executable code.
    35                                  
    36                                  ; 0x0A ascii for next line.  0x0D cursor to the beggining of the line.
    37 00000002 0D0A48656C6C6F2057-     msg_loading db 0x0D, 0x0A, "Hello World.", 0x0D, 0x0A, 0x00
    38 0000000B 6F726C642E0D0A00   
    39                                  
    40                                  main:
    41 00000013 FA                      	cli					;disable interrupts
    42                                  
    43                                  ;***********************************************************
    44                                  ;	Set the segment registers to 0x07C0 as aformentioned
    45                                  ;	We cant direct address a segment register so we copy it to ax first
    46                                  ;	The stack is set to 000F:FFFF, below restricted memory
    47                                  ;***********************************************************
    48 00000014 B8C007                  	mov		ax, 0x07C0
    49 00000017 8ED8                    	mov 	ds, ax
    50 00000019 8EC0                    	mov 	es, ax
    51 0000001B 8EE0                    	mov		fs, ax
    52 0000001D 8EE8                    	mov		gs, ax
    53                                  
    54                                  	;Stack goes right under Video Ram which is at A0000-BFFFF
    55 0000001F B80090                  	mov		ax, 0x9000
    56 00000022 8ED0                    	mov 	ss, ax
    57 00000024 BCFFFF                  	mov		sp, 0xFFFF	;The stack grows down
    58                                  
    59 00000027 FB                      	sti					;restore interrupts so we can make bios calls
    60                                  
    61                                  ;***********************************************************
    62                                  ;	Say Hi
    63                                  ;***********************************************************
    64 00000028 BE[0200]                	mov		si, msg_loading
    65 0000002B E80200                  	call	print
    66                                  end:
    67 0000002E EBFE                    	jmp 	end			;stop here for now
    68                                  
    69                                  ;***********************************************************
    70                                  ;	print:
    71                                  ;	- Prints a string
    72                                  ;	assumes
    73                                  ;	- address of first character is in DS:SI
    74                                  ;	last character is /0 (NULL)
    75                                  ;***********************************************************
    76                                  print:
    77 00000030 AC                      	lodsb				;Load DS:SI into AL for proccessing
    78 00000031 08C0                    	or		al, al 		;this can only set the zero flag if AL is NULL
    79 00000033 7406                    	jz		end_print	;if zero flag is set
    80 00000035 B40E                    	mov		ah, 0eh		;Bios paramaeter
    81 00000037 CD10                    	int		10h			;Bios function
    82 00000039 EBF5                    	jmp		print		;repeat until null terminator is found.
    83                                  end_print:
    84 0000003B C3                      	ret
    85                                  
    86                                  ;$ represents the current line of the program, $$ represents the first line of the program.
    87 0000003C 90<rept>                TIMES 510-($-$$) DB 0x90
    88                                  
    89                                  ;a idiom to fill the rest of the fill the upto 512 with no ops (90) and then 0xAA55
    90                                  ;in little endian format 0xAA55 is 0b1010101001010101 which is about as good a sentinel
    91                                  ;as you are going to get in binary.
    92 000001FE 55AA                    DW 0xAA55
