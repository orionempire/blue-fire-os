
../build/bf_kernel32.elf:     file format elf32-i386
../build/bf_kernel32.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xc0000000

Program Header:
    LOAD off    0x00001000 vaddr 0xc0000000 paddr 0x00100000 align 2**12
         filesz 0x00001000 memsz 0x00001000 flags r-x
    LOAD off    0x00002000 vaddr 0xc0001000 paddr 0x00111000 align 2**12
         filesz 0x00000000 memsz 0x00011000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001000  c0000000  00100000  00001000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00011000  c0001000  00111000  00002000  2**2
                  ALLOC
  2 .comment      0000002c  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
c0000000 l    d  .text	00000000 .text
c0001000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 assembly/test.s
00000000 l    df *ABS*	00000000 video.c
c0011002 g     O .bss	00000002 crt_port
c0011004 g     O .bss	00000001 cur_color
c0011000 g       .bss	00000000 K_STACK_END
c0000000 g       *ABS*	00000000 K_VIR_START
c0000000 g       .text	00000000 KERNEL_TEXT
c0011000 g     O .bss	00000002 cur_pos
c0011005 g     O .bss	00000001 crt_height
00010000 g       *ABS*	00000000 K_STACK_SIZE
c0000020 g       .text	00000000 infinity
c0000000 g     F .text	00000012 k_main
c0012000 g       *ABS*	00000000 KERNEL_TOP
c0000024 g     F .text	0000002c init_video
00001000 g       *ABS*	00000000 PAGE_SIZE
c0012000 g       .bss	00000000 KERNEL_END_BSS
c0011000 g       .bss	00000000 _stack_end
c0011006 g     O .bss	00000001 crt_width
c0001000 g       .text	00000000 KERNEL_DATA
c0001000 g       .text	00000000 KERNEL_END_TEXT
00100000 g       *ABS*	00000000 K_PHYS_START
c0001000 g       .bss	00000000 _stack
c0011000 g       .bss	00000000 KERNEL_BSS
c0001000 g       .text	00000000 KERNEL_END_DATA



Disassembly of section .text:

c0000000 <k_main>:
k_main():
c0000000:	55                   	push   %ebp
c0000001:	89 e5                	mov    %esp,%ebp
c0000003:	83 ec 08             	sub    $0x8,%esp
c0000006:	e8 19 00 00 00       	call   c0000024 <init_video>
c000000b:	e8 10 00 00 00       	call   c0000020 <infinity>
c0000010:	eb fe                	jmp    c0000010 <k_main+0x10>
	...

c0000020 <infinity>:
infinity():
c0000020:	eb fe                	jmp    c0000020 <infinity>
	...

c0000024 <init_video>:
init_video():
c0000024:	55                   	push   %ebp
c0000025:	89 e5                	mov    %esp,%ebp
c0000027:	66 c7 05 02 10 01 c0 	movw   $0x3d4,0xc0011002
c000002e:	d4 03 
c0000030:	c6 05 06 10 01 c0 50 	movb   $0x50,0xc0011006
c0000037:	c6 05 05 10 01 c0 19 	movb   $0x19,0xc0011005
c000003e:	c6 05 04 10 01 c0 07 	movb   $0x7,0xc0011004
c0000045:	66 c7 05 00 10 01 c0 	movw   $0x0,0xc0011000
c000004c:	00 00 
c000004e:	5d                   	pop    %ebp
c000004f:	c3                   	ret    
	...

Disassembly of section .bss:

c0001000 <_stack>:
	...

c0011000 <KERNEL_BSS>:
	...

c0011002 <crt_port>:
	...

c0011004 <cur_color>:
	...

c0011005 <crt_height>:
	...

c0011006 <crt_width>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    %edi
   1:	43                   	inc    %ebx
   2:	43                   	inc    %ebx
   3:	3a 20                	cmp    (%eax),%ah
   5:	28 47 4e             	sub    %al,0x4e(%edi)
   8:	55                   	push   %ebp
   9:	29 20                	sub    %esp,(%eax)
   b:	34 2e                	xor    $0x2e,%al
   d:	35 2e 31 20 32       	xor    $0x3220312e,%eax
  12:	30 31                	xor    %dh,(%ecx)
  14:	30 30                	xor    %dh,(%eax)
  16:	39 32                	cmp    %esi,(%edx)
  18:	34 20                	xor    $0x20,%al
  1a:	28 52 65             	sub    %dl,0x65(%edx)
  1d:	64 20 48 61          	and    %cl,%fs:0x61(%eax)
  21:	74 20                	je     43 <PAGE_SIZE-0xfbd>
  23:	34 2e                	xor    $0x2e,%al
  25:	35 2e 31 2d 34       	xor    $0x342d312e,%eax
  2a:	29 00                	sub    %eax,(%eax)
