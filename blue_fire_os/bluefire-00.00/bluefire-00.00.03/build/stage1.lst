     1                                  ;**********************************************************
     2                                  ;	bluefire-os
     3                                  ;	Version: 00.00.01
     4                                  ;	Author: David Davidson
     5                                  ;	Name: stage1.asm
     6                                  ;	Last update: 2011-11-23
     7                                  ;	Purpose: First stage of our tutorial OS, called by BIOS, loads stage 2 into memory
     8                                  ;	Usage: Must be on sector 1 of a floppy. Must be 512 Bytes and end with 0xAA55
     9                                  ;   Usage: Will be loaded to 0x7C00 (0000:7C00) by BIOS.
    10                                  ;	Usage: must have a stage 2 written raw starting at floppy sector 1400
    11                                  ;***********************************************************
    12                                  
    13                                  ;***********************************************************
    14                                  ;	Since we are starting in real mode everything will be
    15                                  ;	in 16 bits. This directive tells the assembler to assemble
    16                                  ;	for a 16 bit architecture. So for mov it would generate a
    17                                  ;	opcode of B8. When we use "bits 32" the same instruction will
    18                                  ;	generate a op code of 66B8
    19                                  ;***********************************************************
    20                                  bits 16
    21                                  
    22                                  ;***********************************************************
    23                                  ;	As mentioned the code gets loaded at 0x7C00 by bios convention
    24                                  ;	if we used the "org 0x7C00" directive, all of the segment registers
    25                                  ;	would stay at 0x0000 and the assembler would make all address calculations
    26                                  ;	with a delta of 0x7C00, so for example a label on the 3rd byte would
    27                                  ;	be referenced as goto 0x7C03 (0000:7C03).
    28                                  ;	Because this is a tutorial OS we want transparency and visibility
    29                                  ;	over convenience so we will set all segment registers to 0x07C0 so that
    30                                  ;	the address of the label stays 0x0003 but gets addressed like 07C0:0003 (0x7C03)
    31                                   ;***********************************************************
    32                                  
    33                                  org 0
    34                                  
    35 00000000 EB3D                    start: jmp main			; Jump to first bytes of executable code.
    36                                  
    37                                  ; 0x0A ascii for next line.  0x0D cursor to the beggining of the line.
    38 00000002 0D0A4C6F6164696E67-     cst_msg_loading 			DB 0x0D, 0x0A, "Loading Stage 2...", 0x0D, 0x0A, 0x00
    39 0000000B 20537461676520322E-
    40 00000014 2E2E0D0A00         
    41                                  ; print one dot for every disk sector we load
    42 00000019 2E00                    cst_msg_progress 			DB ".", 0x00
    43                                  ; Fatal
    44 0000001B 0D0A466174616C2046-     cst_msg_fatal_failure  		DB 0x0D, 0x0A, "Fatal Failure.....", 0x0A, 0x00
    45 00000024 61696C7572652E2E2E-
    46 0000002D 2E2E0A00           
    47                                  
    48                                  ; The constants that represent where we put stage 2 on the floppy in floppy sectors.
    49 00000031 F00A                    cst_stage2_floppy_sector 	DW	2800
    50 00000033 2800                    cst_stage2_sector_count		DW	40
    51                                  
    52                                  ; The constants that represent the structure of a floppy drive
    53 00000035 00                      cst_drive_number			DB	0		; We only support floppy drive A
    54 00000036 0200                    cst_heads_per_cylinder		DW	2		; A floppy can only have one plater (height of data)
    55 00000038 1200                    cst_sectors_per_track		DW	18		; A floppy has fixed amt of sectors on a track	(width of data)
    56 0000003A 0002                    cst_bytes_per_sector		DW 	512		; evrey sector has 512 bytes init (density of data)
    57                                  
    58                                  ;Variables used to return values from function LBACHS
    59 0000003C 00                      calculated_sector 			DB 0x00
    60 0000003D 00                      calculated_head   			DB 0x00
    61 0000003E 00                      calculated_cylinder			DB 0x00
    62                                  
    63                                  main:
    64 0000003F FA                      	cli					; Disable interrupts
    65                                  
    66                                  ;***********************************************************
    67                                  ;	Set the segment registers to 0x07C0 as aformentioned
    68                                  ;	We cant direct address a segment register so we copy it to ax first
    69                                  ;	The stack is set to 000F:FFFF, below restricted memory
    70                                  ;***********************************************************
    71 00000040 B8C007                  	mov		ax, 0x07C0
    72 00000043 8ED8                    	mov 	ds, ax
    73 00000045 8EC0                    	mov 	es, ax
    74 00000047 8EE0                    	mov		fs, ax
    75 00000049 8EE8                    	mov		gs, ax
    76                                  
    77                                  	;Stack goes right under Video Ram which is at A0000-BFFFF
    78 0000004B B80090                  	mov		ax, 0x9000
    79 0000004E 8ED0                    	mov 	ss, ax
    80 00000050 BCFFFF                  	mov		sp, 0xFFFF	; The stack grows down.
    81                                  
    82 00000053 FB                      	sti					; Restore interrupts so we can make bios calls.
    83                                  
    84                                  ;***********************************************************
    85                                  ;	Display welcome message
    86                                  ;***********************************************************
    87 00000054 BE[0200]                	mov		si, cst_msg_loading
    88 00000057 E82400                  	call	print
    89                                  
    90                                  load_stage_2:
    91                                  	; load to 0800:0000(0x8000)
    92 0000005A B80008                  	mov		ax, 0x0800
    93 0000005D 8EC0                    	mov		es, ax
    94 0000005F BB0000                  	mov		bx, 0x0000
    95                                  	; load from (brackets mean contents of) ...
    96 00000062 A1[3100]                	mov		ax, [cst_stage2_floppy_sector]		; starting sector
    97 00000065 8B0E[3300]              	mov		cx, [cst_stage2_sector_count]		; sector count
    98                                  
    99 00000069 E81E00                  	call	read_sectors
   100                                  
   101                                  ;***********************************************************
   102                                  ;	Jump to where we loaded our stage 2 code
   103                                  ;	retf will jump to address on stack wich was just pushed.
   104                                  ;***********************************************************
   105 0000006C 680008                  	push    WORD 0x0800		;(0800:0000)
   106 0000006F 6A00                    	push    WORD 0x0000
   107                                  	; jump to execute sector (0800:0000) where stage 2 was loaded
   108 00000071 CB                      	retf
   109                                  
   110                                  ;***********************************************************
   111                                  ;		Halt Execution
   112                                  ;***********************************************************
   113                                  fatal_failure:
   114 00000072 BE[1B00]                	mov		si, cst_msg_fatal_failure
   115 00000075 E80600                  	call print
   116 00000078 B400                    	mov		ah,	0x00	; Both bios call use paramater 0
   117 0000007A CD16                    	int		0x16		; BIOS 0x16 AH=0x00 -> await keypress
   118 0000007C CD19                    	int		0x19		; BIOS 0x19 AH=0x00 ->warm boot computer
   119                                  
   120                                  
   121                                  ;***********************************************************
   122                                  ;	print:
   123                                  ;	- Prints a string
   124                                  ;	assumes
   125                                  ;	- address of first character is in DS:SI
   126                                  ;	last character is /0 (NULL)
   127                                  ;***********************************************************
   128                                  print:
   129 0000007E AC                      	lodsb					; Load DS:SI into AL for proccessing
   130 0000007F 08C0                    	or		al, al 			; this can only set the zero flag if AL is NULL
   131 00000081 7406                    	jz		end_print		; if zero flag is set
   132 00000083 B40E                    	mov		ah, 0eh			; Bios paramaeter
   133 00000085 CD10                    	int		10h				; Bios function
   134 00000087 EBF5                    	jmp		print			; repeat until null terminator is found.
   135                                  end_print:
   136 00000089 C3                      	ret
   137                                  
   138                                  ;***********************************************************
   139                                  ;	read_sectors:
   140                                  ;	-> AX 		=> Starting Sector
   141                                  ;	-> CX 		=> Amount of sectors to read
   142                                  ;	-> ES:BX 	=> Buffer to read to
   143                                  ;***********************************************************
   144                                  read_sectors:
   145                                  	.read_sectors_start:
   146 0000008A BF0500                  		mov		di,0x0005						; Five retries in case of error
   147                                  	.sector_loop:
   148 0000008D 50                      		push 	ax								; Save the registers that we are going to use.
   149 0000008E 53                      		push 	bx
   150 0000008F 51                      		push 	cx
   151 00000090 E83600                  		call LBACHS								; Calculate what the starting sector is
   152 00000093 B402                    		mov     ah, 0x02						; 02 Bios read sector function
   153 00000095 B001                    		mov     al, 0x01 						; Read one sector at a time
   154 00000097 8A2E[3E00]              		mov     ch, BYTE [calculated_cylinder]	; cylinder as returned by LBACHS
   155 0000009B 8A0E[3C00]                      mov     cl, BYTE [calculated_sector]	; sector as returned by LBACHS
   156 0000009F 8A36[3D00]                      mov     dh, BYTE [calculated_head]		; head as returned by LBACHS
   157 000000A3 8A16[3500]                      mov     dl, BYTE [cst_drive_number]		; drive is always 0
   158 000000A7 CD13                    		int     0x13							; invoke BIOS 0x13 AH=0x02
   159 000000A9 730D                    		jnc     .success                        ; test carry flag against a read error
   160 000000AB 31C0                    		xor     ax, ax							; 0 is BIOS reset disk
   161 000000AD CD13                    		int     0x13							; invoke BIOS 0x13 AH=0x00
   162 000000AF 4F                      		dec     di								; decrement error counter
   163 000000B0 59                      		pop     cx
   164 000000B1 5B                      		pop     bx
   165 000000B2 58                      		pop     ax
   166 000000B3 75D8                    		jnz     .sector_loop 					; if less the 5 tries, attempt to read again
   167                                  		;int     0x18							; Else, 0x18 is a bios reset TODO -> replace
   168 000000B5 E8BAFF                  		call 	fatal_failure
   169                                  	.success:
   170 000000B8 BE[1900]                		mov     si, cst_msg_progress
   171 000000BB E8C0FF                  		call    print
   172 000000BE 59                      		pop     cx
   173 000000BF 5B                      		pop     bx
   174 000000C0 58                      		pop     ax
   175 000000C1 031E[3A00]              		add     bx, WORD [cst_bytes_per_sector] ; queue next buffer
   176 000000C5 40                      		inc     ax                              ; queue next sector
   177 000000C6 E2C2                    		loop    .read_sectors_start             ; Decreases CX and jums if not zero.
   178 000000C8 C3                      		ret
   179                                  
   180                                  ;***********************************************************
   181                                  ; 	LBACHS
   182                                  ;	Convert LBA to CHS
   183                                  ; 	AX -> LBA Address to convert
   184                                  ;
   185                                  ;	Returns <-
   186                                  ; 		calculated_sector 	= (logical sector mod sectors per track) + 1
   187                                  ; 		calculated_head   	= (logical sector / sectors per track) MOD number of heads
   188                                  ; 		calculated_cylinder = logical sector / (sectors per track * number of heads)
   189                                  ;
   190                                  ;***********************************************************
   191                                  LBACHS:
   192 000000C9 31D2                        xor     dx, dx                              ; Zero out dx
   193 000000CB F736[3800]                  div     WORD [cst_sectors_per_track]		; Calculate sector against DX:AX store quotient->AX remainder->DX
   194 000000CF FEC2                        inc     dl                                  ; Adjust for sector 0
   195 000000D1 8816[3C00]                  mov     BYTE [calculated_sector], dl		; Store the result.
   196 000000D5 31D2                        xor     dx, dx                              ; Zero out dx
   197 000000D7 F736[3600]                  div     WORD [cst_heads_per_cylinder]		; calculate sector against DX:AX store quotient->AX remainder->DX
   198 000000DB 8816[3D00]                  mov     BYTE [calculated_head], dl			; Store the result.
   199 000000DF A2[3E00]                    mov     BYTE [calculated_cylinder], al		; Store the result.
   200 000000E2 C3                      	ret
   201                                  
   202                                  ;$ represents the current line of the program, $$ represents the first line of the program.
   203 000000E3 90<rept>                TIMES 510-($-$$) DB 0x90
   204                                  
   205                                  ; An idiom to fill the rest of the fill the upto 512 with no ops (90) and then 0xAA55
   206                                  ; in little endian format 0xAA55 is 0b1010101001010101 which is about as good a sentinel
   207                                  ; as you are going to get in binary.
   208 000001FE 55AA                    DW 0xAA55
   209                                  
   210                                  ; --------- Used BIOS functions ---------
   211                                  ; INT 13h AH=00h: Reset Disk Drive
   212                                  ;	Parameters:
   213                                  ;		AH 	00h
   214                                  ;		DL 	Drive
   215                                  ;	Results:
   216                                  ;		CF 	Set on error
   217                                  ;
   218                                  ; INT 13h AH=02h: Read Sectors From Drive
   219                                  ;	Parameters:
   220                                  ;		AH 	02h
   221                                  ;		AL 	Sectors To Read Count
   222                                  ;		CH 	Track
   223                                  ;		CL 	Sector
   224                                  ;		DH 	Head
   225                                  ;		DL 	Drive
   226                                  ;		ES:BX 	Buffer Address Pointer
   227                                  ;	Results:
   228                                  ;		CF 	Set On Error, Clear If No Error
   229                                  ;		AH 	Return Code
   230                                  ;		AL 	Actual Sectors Read Count
   231                                  ;
   232                                  ; INT 16h AH=00h: Read Character
   233                                  ;	Results:
   234                                  ;		Will wait for keypress on keyboard
   235                                  ;
   236                                  ; INT 19h AH=00h: After POST this interrupt is used by BIOS to load the operating system.
   237                                  ;	Results:
   238                                  ;		Computer will reboot.
