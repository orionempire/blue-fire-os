     1                                  ;**********************************************************
     2                                  ;	bluefire-os
     3                                  ;	Version: 00.00.02
     4                                  ;	Author: David Davidson
     5                                  ;	Name: stage2.asm
     6                                  ;	Last update: 2011-11-20
     7                                  ;***********************************************************
     8                                  
     9                                  ;***********************************************************
    10                                  ;	As in stage 1 we are still generating 16 bit code as
    11                                  ;	it will be running in real mode for now
    12                                  ;***********************************************************
    13                                  bits 16
    14                                  
    15                                  ;***********************************************************
    16                                  ;	To keep things interesting we are going to use the other
    17                                  ;	addressing technique. We are going to set our segment registers
    18                                  ;	to 0 and have all addresses in the code prefix with 0x8000
    19                                  ;***********************************************************
    20                                  org 0x8000
    21                                  
    22 00000000 EB45                    start:	jmp main	;jump over to first byte of executable code
    23                                  
    24                                  ;0x0A ascii for next line.  0x0D cursor to the beggining of the line.
    25 00000002 0D0A4C6F6164696E67-     cst_msg_loading 			DB 0x0D, 0x0A, "Loading Stage 2...", 0x0D, 0x0A, 0x00
    26 0000000B 20537461676520322E-
    27 00000014 2E2E0D0A00         
    28                                  
    29                                  
    30                                  ;***********************************************************
    31                                  ; Global Descriptor Table (GDT)
    32                                  ;***********************************************************
    33                                  
    34                                  gdt_data:
    35 00000019 00000000                	dd 0               		; null descriptor
    36 0000001D 00000000                	dd 0
    37                                  
    38                                  ; kernel code:				; code descriptor
    39 00000021 FFFF                    	dw 0FFFFh           	; limit low
    40 00000023 0000                    	dw 0                	; base low
    41 00000025 00                      	db 0                	; base middle
    42 00000026 9A                      	db 10011010b        	; access
    43 00000027 CF                      	db 11001111b        	; granularity
    44 00000028 00                      	db 0                	; base high
    45                                  
    46                                  ; kernel data:	        	; data descriptor
    47 00000029 FFFF                    	dw 0FFFFh           	; limit low (Same as code)
    48 0000002B 0000                    	dw 0                	; base low
    49 0000002D 00                      	db 0                	; base middle
    50 0000002E 92                      	db 10010010b        	; access
    51 0000002F CF                      	db 11001111b        	; granularity
    52 00000030 00                      	db 0                	; base high
    53                                  
    54                                  ; user code:	        	; code descriptor
    55 00000031 FFFF                    	dw 0FFFFh           	; limit low
    56 00000033 0000                    	dw 0                	; base low
    57 00000035 00                      	db 0                	; base middle
    58 00000036 FA                      	db 11111010b        	; access
    59 00000037 CF                      	db 11001111b        	; granularity
    60 00000038 00                      	db 0                	; base high
    61                                  
    62                                  ; user data:	         	; data descriptor
    63 00000039 FFFF                    	dw 0FFFFh           	; limit low (Same as code)
    64 0000003B 0000                    	dw 0                	; base low
    65 0000003D 00                      	db 0                	; base middle
    66 0000003E F2                      	db 11110010b        	; access
    67 0000003F CF                      	db 11001111b        	; granularity
    68 00000040 00                      	db 0                	; base high
    69                                  end_of_gdt:
    70                                  toc:
    71 00000041 2700                    	dw end_of_gdt - gdt_data - 1 	; limit (Size of GDT)
    72 00000043 [19000000]              	dd gdt_data 			; base of GDT
    73                                  
    74                                  main:
    75 00000047 FA                      	cli						; clear interrupts
    76                                  
    77                                  ;***********************************************************
    78                                  ;	Set the segment registers back to 0x0000 as aformentioned
    79                                  ;	As we are now using the org directive to hard code the address offsets
    80                                  ;	The stack is staying at 000F:FFFF and should be empty at this point
    81                                  ;	but we set it again to be safe
    82                                  ;***********************************************************
    83 00000048 31C0                    	xor		ax, ax			; null segments
    84 0000004A 8ED8                    	mov		ds, ax
    85 0000004C 8EC0                    	mov		es, ax
    86                                  
    87 0000004E B80090                  	mov 	ax, 0x9000
    88 00000051 8ED0                    	mov		ss, ax
    89 00000053 BCFFFF                  	mov		sp, 0xFFFF
    90 00000056 FB                      	sti						; restore interupts we need them before we can make any bios call
    91                                  
    92                                  ;***********************************************************
    93                                  ;	Enable the A20 line
    94                                  ;	Allows more than 1MB to be accessed
    95                                  ;***********************************************************
    96 00000057 E81400                  	call enable_a20_keyboard_out
    97                                  
    98                                  ;***********************************************************
    99                                  ;	Display welcome message
   100                                  ;***********************************************************
   101 0000005A BE[0200]                	mov		si, cst_msg_loading
   102 0000005D E80200                  	call	print
   103                                  
   104                                  end:
   105 00000060 EBFE                    	jmp 	end				;stop here for now
   106                                  
   107                                  
   108                                  ;***********************************************************
   109                                  ;	print:
   110                                  ;	- Prints a string
   111                                  ;	assumes
   112                                  ;	- address of first character is in DS:SI
   113                                  ;	last character is /0 (NULL)
   114                                  ;***********************************************************
   115                                  print:
   116 00000062 AC                      	lodsb					; Load DS:SI into AL for proccessing
   117 00000063 08C0                    	or		al, al 			; this can only set the zero flag if AL is NULL
   118 00000065 7406                    	jz		end_print		; if zero flag is set
   119 00000067 B40E                    	mov		ah, 0eh			; Bios paramaeter
   120 00000069 CD10                    	int		10h				; Bios function
   121 0000006B EBF5                    	jmp		print			; repeat until null terminator is found.
   122                                  end_print:
   123 0000006D C3                      	ret
   124                                  
   125                                  ;***********************************************************
   126                                  ;		enable_a20_keyboard_out:
   127                                  ;		- enable the a20 line
   128                                  ;		- Uses the keyboard controller out port method
   129                                  ;***********************************************************
   130                                  enable_a20_keyboard_out:
   131 0000006E FA                      	cli						;stop interupts
   132 0000006F 60                      	pusha					;save state of all registers
   133 00000070 E82F00                  	call 	wait_for_clear_input
   134 00000073 B0AD                    	mov     al,0xAD
   135 00000075 E664                    	out     0x64,al			; disable the keyboard
   136 00000077 E82800                  	call 	wait_for_clear_input
   137                                  
   138 0000007A B0D0                    	mov     al,0xD0
   139 0000007C E664                    	out     0x64,al			; tell controller to read key board output port
   140 0000007E E82800                  	call    wait_for_clear_output
   141                                  
   142 00000081 E460                    	in      al,0x60
   143 00000083 6650                    	push    eax				; get output port data and store it
   144 00000085 E81A00                  	call 	wait_for_clear_input
   145                                  
   146 00000088 B0D1                    	mov     al,0xD1
   147 0000008A E664                    	out     0x64,al			; tell controller to write to output port
   148 0000008C E81300                  	call 	wait_for_clear_input
   149                                  
   150 0000008F 6658                    	pop     eax
   151 00000091 0C02                    	or      al,2			; set bit 1 (enable a20)
   152 00000093 E660                    	out     0x60,al			; write out data back to the output port
   153                                  
   154 00000095 E80A00                  	call 	wait_for_clear_input
   155 00000098 B0AE                    	mov     al,0xAE		; enable the keyboard
   156 0000009A E664                    	out     0x64,al
   157                                  
   158 0000009C E80300                  	call 	wait_for_clear_input
   159 0000009F 61                      	popa
   160 000000A0 FB                      	sti
   161 000000A1 C3                      	ret
   162                                  
   163                                  wait_for_clear_input:	;wait for a clear input buffer
   164 000000A2 E464                    	in      al,0x64
   165 000000A4 A802                    	test    al,2
   166 000000A6 75FA                    	jnz     wait_for_clear_input
   167 000000A8 C3                      	ret
   168                                  
   169                                  wait_for_clear_output:	;wait for a clear output buffer
   170 000000A9 E464                    	in      al,0x64
   171 000000AB A801                    	test    al,1
   172 000000AD 74FA                    	jz      wait_for_clear_output
   173 000000AF C3                      	ret
