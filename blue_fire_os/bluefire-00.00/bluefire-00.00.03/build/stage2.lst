     1                                  ;**********************************************************
     2                                  ;	bluefire-os
     3                                  ;	Version: 00.00.02
     4                                  ;	Author: David Davidson
     5                                  ;	Name: stage2.asm
     6                                  ;	Last update: 2011-11-20
     7                                  ;***********************************************************
     8                                  
     9                                  ;***********************************************************
    10                                  ;	As in stage 1 we are still generating 16 bit code as
    11                                  ;	it will be running in real mode for now
    12                                  ;***********************************************************
    13                                  bits 16
    14                                  
    15                                  ;***********************************************************
    16                                  ;	To keep things interesting we are going to use the other
    17                                  ;	addressing technique. We are going to set our segment registers
    18                                  ;	to 0 and have all addresses in the code prefix with 0x8000
    19                                  ;***********************************************************
    20                                  org 0x8000
    21                                  
    22 00000000 EB45                    start:	jmp main	;jump over to first byte of executable code
    23                                  
    24                                  ;0x0A ascii for next line.  0x0D cursor to the beggining of the line.
    25 00000002 0D0A4C6F6164696E67-     cst_msg_loading 			DB 0x0D, 0x0A, "Loading Stage 2...", 0x0D, 0x0A, 0x00
    26 0000000B 20537461676520322E-
    27 00000014 2E2E0D0A00         
    28                                  
    29                                  
    30                                  ;***********************************************************
    31                                  ; Global Descriptor Table (GDT)
    32                                  ;***********************************************************
    33                                  
    34                                  gdt_data:
    35                                  ; Dummy descriptor			; 0x00
    36 00000019 0000                    	dw 0					; Limit 15:0
    37 0000001B 0000                    	dw 0					; Base 15:0
    38 0000001D 00                      	db 0					; Base 23:16
    39 0000001E 00                      	db 0					; Access byte (descriptor type)
    40 0000001F 00                      	db 0					; Limits 19:16, Flags
    41 00000020 00                      	db 0					; Base 31:24
    42                                  
    43                                  ; kernel code:				; code descriptor
    44 00000021 FFFF                    	dw 0FFFFh           	; limit low
    45 00000023 0000                    	dw 0                	; base low
    46 00000025 00                      	db 0                	; base middle
    47 00000026 9A                      	db 10011010b        	; access
    48 00000027 CF                      	db 11001111b        	; granularity
    49 00000028 00                      	db 0                	; base high
    50                                  
    51                                  ; kernel data:	        	; data descriptor
    52 00000029 FFFF                    	dw 0FFFFh           	; limit low (Same as code)
    53 0000002B 0000                    	dw 0                	; base low
    54 0000002D 00                      	db 0                	; base middle
    55 0000002E 92                      	db 10010010b        	; access
    56 0000002F CF                      	db 11001111b        	; granularity
    57 00000030 00                      	db 0                	; base high
    58                                  
    59                                  ; user code:	        	; code descriptor
    60 00000031 FFFF                    	dw 0FFFFh           	; limit low
    61 00000033 0000                    	dw 0                	; base low
    62 00000035 00                      	db 0                	; base middle
    63 00000036 FA                      	db 11111010b        	; access
    64 00000037 CF                      	db 11001111b        	; granularity
    65 00000038 00                      	db 0                	; base high
    66                                  
    67                                  ; user data:	         	; data descriptor
    68 00000039 FFFF                    	dw 0FFFFh           	; limit low (Same as code)
    69 0000003B 0000                    	dw 0                	; base low
    70 0000003D 00                      	db 0                	; base middle
    71 0000003E F2                      	db 11110010b        	; access
    72 0000003F CF                      	db 11001111b        	; granularity
    73 00000040 00                      	db 0                	; base high
    74                                  end_of_gdt:
    75                                  toc:
    76 00000041 2700                    	dw end_of_gdt - gdt_data - 1 	; limit (Size of GDT)
    77 00000043 [19000000]              	dd gdt_data 			; base of GDT
    78                                  
    79                                  main:
    80 00000047 FA                      	cli						; clear interrupts
    81                                  
    82                                  ;***********************************************************
    83                                  ;	Set the segment registers back to 0x0000 as aformentioned
    84                                  ;	As we are now using the org directive to hard code the address offsets
    85                                  ;	The stack is staying at 000F:FFFF and should be empty at this point
    86                                  ;	but we set it again to be safe
    87                                  ;***********************************************************
    88 00000048 31C0                    	xor		ax, ax			; null segments
    89 0000004A 8ED8                    	mov		ds, ax
    90 0000004C 8EC0                    	mov		es, ax
    91                                  
    92 0000004E B80090                  	mov 	ax, 0x9000
    93 00000051 8ED0                    	mov		ss, ax
    94 00000053 BCFFFF                  	mov		sp, 0xFFFF
    95 00000056 FB                      	sti						; restore interupts we need them before we can make any bios call
    96                                  
    97                                  ;***********************************************************
    98                                  ;	Enable the A20 line
    99                                  ;	Allows more than 1MB to be accessed
   100                                  ;***********************************************************
   101 00000057 E81400                  	call enable_a20_keyboard_out
   102                                  
   103                                  ;***********************************************************
   104                                  ;	Display welcome message
   105                                  ;***********************************************************
   106 0000005A BE[0200]                	mov		si, cst_msg_loading
   107 0000005D E80200                  	call	print
   108                                  
   109                                  end:
   110 00000060 EBFE                    	jmp 	end				;stop here for now
   111                                  
   112                                  
   113                                  ;***********************************************************
   114                                  ;	print:
   115                                  ;	- Prints a string
   116                                  ;	assumes
   117                                  ;	- address of first character is in DS:SI
   118                                  ;	last character is /0 (NULL)
   119                                  ;***********************************************************
   120                                  print:
   121 00000062 AC                      	lodsb					; Load DS:SI into AL for proccessing
   122 00000063 08C0                    	or		al, al 			; this can only set the zero flag if AL is NULL
   123 00000065 7406                    	jz		end_print		; if zero flag is set
   124 00000067 B40E                    	mov		ah, 0eh			; Bios paramaeter
   125 00000069 CD10                    	int		10h				; Bios function
   126 0000006B EBF5                    	jmp		print			; repeat until null terminator is found.
   127                                  end_print:
   128 0000006D C3                      	ret
   129                                  
   130                                  ;***********************************************************
   131                                  ;		enable_a20_keyboard_out:
   132                                  ;		- enable the a20 line
   133                                  ;		- Uses the keyboard controller out port method
   134                                  ;***********************************************************
   135                                  enable_a20_keyboard_out:
   136 0000006E FA                      	cli						;stop interupts
   137 0000006F 60                      	pusha					;save state of all registers
   138 00000070 E82F00                  	call 	wait_for_clear_input
   139 00000073 B0AD                    	mov     al,0xAD
   140 00000075 E664                    	out     0x64,al			; disable the keyboard
   141 00000077 E82800                  	call 	wait_for_clear_input
   142                                  
   143 0000007A B0D0                    	mov     al,0xD0
   144 0000007C E664                    	out     0x64,al			; tell controller to read key board output port
   145 0000007E E82800                  	call    wait_for_clear_output
   146                                  
   147 00000081 E460                    	in      al,0x60
   148 00000083 6650                    	push    eax				; get output port data and store it
   149 00000085 E81A00                  	call 	wait_for_clear_input
   150                                  
   151 00000088 B0D1                    	mov     al,0xD1
   152 0000008A E664                    	out     0x64,al			; tell controller to write to output port
   153 0000008C E81300                  	call 	wait_for_clear_input
   154                                  
   155 0000008F 6658                    	pop     eax
   156 00000091 0C02                    	or      al,2			; set bit 1 (enable a20)
   157 00000093 E660                    	out     0x60,al			; write out data back to the output port
   158                                  
   159 00000095 E80A00                  	call 	wait_for_clear_input
   160 00000098 B0AE                    	mov     al,0xAE		; enable the keyboard
   161 0000009A E664                    	out     0x64,al
   162                                  
   163 0000009C E80300                  	call 	wait_for_clear_input
   164 0000009F 61                      	popa
   165 000000A0 FB                      	sti
   166 000000A1 C3                      	ret
   167                                  
   168                                  wait_for_clear_input:	;wait for a clear input buffer
   169 000000A2 E464                    	in      al,0x64
   170 000000A4 A802                    	test    al,2
   171 000000A6 75FA                    	jnz     wait_for_clear_input
   172 000000A8 C3                      	ret
   173                                  
   174                                  wait_for_clear_output:	;wait for a clear output buffer
   175 000000A9 E464                    	in      al,0x64
   176 000000AB A801                    	test    al,1
   177 000000AD 74FA                    	jz      wait_for_clear_output
   178 000000AF C3                      	ret
