/******************************************************************************
 *			--------- dma.c ----------
******************************************************************************/

// Initialize the DMA free frames vector.
// Should one day become a bitset.
dma_free_frames = (u32int *)kmalloc(((DMA_MEMORY_DIMINSION / PAGE_SIZE) * sizeof(u32int)), GFP_KERNEL); //0x3ff4

//dma_free_frames[0x0..0xFFD]
for( i = 0; i < DMA_MEMORY_DIMINSION / PAGE_SIZE; i++ ) { //0x0 - 0xFFD
	dma_free_frames[ i ] = DMA_FREE_FRAME;
}

// Set the video buffer memory busy.
//dma_free_frames[0x09D..0x0BC] -> (0x000A0000,0x000C0000)
for( i = DMA_FRAME_ADDR(PHYSICAL_VIDEO_BUFFFER_START) / PAGE_SIZE; i < DMA_FRAME_ADDR(PHYSICAL_VIDEO_BUFFFER_END) / PAGE_SIZE; i++ ) {//0x9D - 0xBC
	dma_free_frames[ i ] = DMA_BUSY_FRAME;
}

//dma_free_frames[0x0BD..0x0FC] -> (0x000C0000,0x00100000)
// Set the BIOS ROM memory busy.
for( i = DMA_FRAME_ADDR(PHYSICAL_BIOS_ROM_START) / PAGE_SIZE; i < (DMA_FRAME_ADDR(PHYSICAL_BIOS_ROM_END) / PAGE_SIZE); i++ ) { //0xBD - 0xFC
	dma_free_frames[ i ] = DMA_BUSY_FRAME;
}


//Amount of frames that the kernel takes up. KERNEL_END_CODE is set in the linker script (kernel.ld)
u32int kernel_code_frame_count = (((u32int)&KERNEL_END_CODE - VIRTUAL_KERNEL_START) / PAGE_SIZE);

//Mark the kernel physical space taken.
//dma_free_frames[0x0FC..0x129] -> (0x00100000,0x00128000) //TODO - will change as code grows
for( i = 0; i <= kernel_code_frame_count; i++) {//0xFD - 0x129
	dma_free_frames[ (DMA_FRAME_ADDR(PHYSICAL_KERNEL_START) / PAGE_SIZE) + i ] = DMA_BUSY_FRAME;
}


/******************************************************************************
 *			--------- dma.h ----------
******************************************************************************/
#define DMA_MEMORY_DIMINSION (PHYSICAL_DMA_MEMORY_END - PHYSICAL_DMA_MEMORY_START)
// Normalize the physical address to the dma base address.
#define DMA_FRAME_ADDR( i ) \
	(((i) < PHYSICAL_DMA_MEMORY_START) ? 0 : ((size_t)(i) - PHYSICAL_DMA_MEMORY_START))
